CREATE OR ALTER   PROCEDURE [SP_AI_UPLOAD_SHIFT_INFO]
AS 
BEGIN
DECLARE @SFTCodeCal VARCHAR(25)
DECLARE @SFTDefaultCal VARCHAR(25)

BEGIN TRY  
--Get SFT code
SET @SFTCodeCal = RIGHT('000000' + CAST((SELECT ISNULL(MAX(SFT_CODE), 0) FROM HS_TA_SHIFTDEF) AS VARCHAR(25)), 6)

--Get SFT Default value
SET @SFTDefaultCal = 
    CASE 
        WHEN @SFTCodeCal = '000001' THEN 1
        ELSE 0
    END;

-- Insert Shift (Basic Shift)
INSERT INTO [HS_TA_SHIFTDEF]
           ([SFT_CODE]
		   ,[SFT_DIS_CODE]
		   ,[SFT_ABBRV]
		   ,[SFT_LEAVEAMOUNT]
		   ,[SFT_MIDNIGHT]
		   ,[SFT_FLXSHIFT]
		   ,[SFT_MAX_CNT_SHIFTS]
		   ,[SFT_CONTINUE]
		   ,[SFT_ACTIVE]
		   ,[SFT_OFFSHIFT]
		   ,[SFT_OT_AUTO_FIX]
		   ,[SFT_MULSHIFTS]
		   ,[SFT_SPECIAL]
		   ,[SFT_COLUR]
		   ,[SFT_TIMEBASE]
		   ,[SFT_AUTO_MIDNIGHT]
		   ,[SFT_DEFAULT]
		   ,[DBGROUP_ID]
		   ,[SFT_LTECOVER]
		   ,[SFT_IS_LATECAL]
		   ,[SFT_DEMPBRK_HRS_FRMOT]
		   ,[SFT_FLEXIHRS])
SELECT RIGHT('000000'+CAST(@SFTCodeCal + ROW_NUMBER() OVER (ORDER BY [ID]) AS varchar(25)),6),
SG.SHIFT_NAME, SG.SHIFT_ABR, SG.LEAVE_DAYS, (CASE WHEN SG.FLEXI_SHIFT = 1 THEN 0 ELSE SG.NEXT_DAY_SHIFT_OUT_TIME END), (CASE WHEN SG.FLEXI_SHIFT IS NULL THEN 0 ELSE SG.FLEXI_SHIFT END), 0, SG.CONTINUE_SHIFT, 1, SG.OFF_SHIFT,
0, 0, 0, '', 1, SG.AUTO_MID_NIGHT_FIX, @SFTDefaultCal, NULL, SG.LATE_COVER, SG.BRK_ALLOW_LATE_HRS_CALC, SG.ALLOW_DEDCT_OUT_HRS, (CASE WHEN SG.FLEXI_SHIFT = 1 THEN (SG.END_TIME - SG.START_TIME)  ELSE 0.00 END)
FROM  HS_HR_IA_SHIFT_INFO_UPLOAD SG

--Insert Sift Segment (Basic Shift Segment)
INSERT INTO [HS_TA_SHIFTDEF_SEGMENT]
           ([SFT_CODE]
		   ,[SEG_NAME]
		   ,[SEG_SEQUENCE]
		   ,[SEG_TIMEIN]
		   ,[SEG_TIMEOUT]
		   ,[SEG_MIDIN_HRS]
		   ,[SEG_MIDOUT_HRS]
		   ,[SEG_ST_CUTHRS]
		   ,[SEG_ENDOUT_CUTHRS]
		   ,[SEG_TIMEIN_DAY]
		   ,[SEG_TIMEOUT_DAY]
		   ,[SEG_MIN_OT_HRS]
		   ,[SEG_MAX_OT_HRS]
		   ,[SEG_SFT_COLOR]
		   ,[SEG_MIN_POST_OT_HRS]
		   ,[SEG_MAX_POST_OT_HRS])
SELECT RIGHT('000000'+CAST(@SFTCodeCal + ROW_NUMBER() OVER (ORDER BY [ID]) AS varchar(25)),6), 
SG.SHIFT_NAME, 1, (CASE WHEN SG.FLEXI_SHIFT = 1 THEN 0.00  ELSE SG.START_TIME END), (CASE WHEN SG.FLEXI_SHIFT = 1 THEN 0.00  ELSE SG.END_TIME END), SG.FIRST_HALF_DUR, SG.SECOND_HALF_DUR, SG.START_TIME, SG.END_TIME , 1, (CASE WHEN SG.NEXT_DAY_SHIFT_OUT_TIME = 1 THEN 2  ELSE 1 END),
10.0, 0.0, '#3f6b98', 10.0, 0.0
FROM  HS_HR_IA_SHIFT_INFO_UPLOAD SG

--Insert Day Basic Shift
INSERT INTO [HS_TA_SHIFTDEF_DAY_CONFIG]
           ([SFT_CODE]
		   ,[HT_CODE]
		   ,[SFT_MIDNIGHT]
		   ,[SFT_FLXSHIFT]
		   ,[SFT_CONTINUE]
		   ,[SFT_OFFSHIFT]
		   ,[SFT_COLUR]
		   ,[SFT_TIMEBASE]
		   ,[SFT_TIMEIN]
		   ,[SFT_TIMEOUT]
		   ,[SFT_MIDIN_HRS]
		   ,[SFT_MIDOUT_HRS]
		   ,[SFT_LEAVEAMOUNT]
		   ,[SFT_AUTO_MIDNIGHT]
		   ,[SFT_ST_CUTHRS]
		   ,[SFT_ENDOUT_CUTHRS]
		   ,[SFT_TIMEIN_DAY]
		   ,[SFT_TIMEOUT_DAY]
		   ,[SFT_MAX_OT_HRS]
		   ,[SFT_MIN_OT_HRS]
		   ,[SFT_MAX_POST_OT_HRS]
		   ,[SFT_MIN_POST_OT_HRS]
		   ,[SFT_SOT_ENBL]
		   ,[SFT_EOT_ENBL]
		   ,[SFT_LTECOVER]
		   ,[SFT_DEMPBRK_HRS_FRMOT]
		   ,[SFT_FLEXIHRS])
SELECT RIGHT('000000'+CAST(@SFTCodeCal + ROW_NUMBER() OVER (ORDER BY [ID]) AS varchar(25)),6), 
0, (CASE WHEN SG.FLEXI_SHIFT = 1 THEN 0 ELSE SG.NEXT_DAY_SHIFT_OUT_TIME END), (CASE WHEN SG.FLEXI_SHIFT IS NULL THEN 0 ELSE SG.FLEXI_SHIFT END), SG.CONTINUE_SHIFT, SG.OFF_SHIFT, '#3f6b98', 1, 
(CASE WHEN SG.FLEXI_SHIFT = 1 THEN 0.00  ELSE SG.START_TIME END), (CASE WHEN SG.FLEXI_SHIFT = 1 THEN 0.00  ELSE SG.END_TIME END), SG.FIRST_HALF_DUR, SG.SECOND_HALF_DUR, SG.LEAVE_DAYS, SG.AUTO_MID_NIGHT_FIX, 
SG.START_TIME, SG.END_TIME , 1,
(CASE WHEN SG.NEXT_DAY_SHIFT_OUT_TIME = 1 THEN 2  ELSE 1 END),
10.0, 0.0, 10.0, 0.0, 1, 1, SG.LATE_COVER, SG.ALLOW_DEDCT_OUT_HRS, (CASE WHEN SG.FLEXI_SHIFT = 1 THEN (SG.END_TIME - SG.START_TIME)  ELSE 0.00 END)
FROM  HS_HR_IA_SHIFT_INFO_UPLOAD SG

select 'True' as status , 'Successfully added' as message
END TRY  
BEGIN CATCH
	INSERT INTO [HS_HR_IA_ERROR_LOGS]
			   ([ERROR_LINE]
			   ,[ERROR_MESSAGE]
			   ,[ERROR_NUMBER]
			   ,[ERROR_PROCEDURE]
			   ,[ERROR_SEVERITY]
			   ,[ERROR_STATE]
			   ,[ERROR_DATE])
	SELECT  
	ERROR_LINE () as ErrorLine,  
	Error_Message() as ErrorMessage,  
	Error_Number() as ErrorNumber,  
	Error_Procedure() as 'Proc',  
	Error_Severity() as ErrorSeverity,  
	Error_State() as ErrorState,  
	GETDATE () as DateErrorRaised 

	SELECT  
		'False' as status  
       ,ERROR_MESSAGE() AS message;  
END CATCH  

END
GO